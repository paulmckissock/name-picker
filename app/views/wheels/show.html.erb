<div class="flex flex-row justify-between px-8">
            <h1>Wheel Title</h1>
            <button class="btn-primary">Present</button>
        </div>

<div class="h-screen flex flex-row">
    <div class="w-1/2 flex items-center justify-center">
        <div class="p-20">
            <!-- The wheel -->
            <div id="wheel">
            <canvas id="canvas" width="610" height="600"></canvas>
            </div>
            <div id="stats">
            </div>
        </div>
    </div>
    <div class="w-1/2 flex items-center justify-center">
        <div class="p-10 gap-8">
          <!-- Participants tabs -->
            <div class="relative w-96 p-4">
                <div class="absolute -top-10 left-0 flex space-x-2">
                    <div id="editTab" class="active-tab">Edit</div>
                    <div id="viewTab" class="inactive-tab">View</div>
                </div>
                <div id="viewMode" class="hidden p-4">
                <h2 class="text-lg font-bold">Past Results</h2>
                <div class="flex flex-wrap gap-2">
                    <% @results.each do |result| %>
                    <div class="rounded-full bg-gray-800 text-white p-2 px-4 flex flex-row gap-2">
                        <p><%= result.participant_name %></p>
                    </div>
                    <% end %>
                </div>
                </div>
                <div id="editMode" class="p-4">
                <h2 class="text-lg font-bold">Edit Participants</h2>
                <div id="editParticipants" class="flex flex-wrap gap-2 pb-4">
                    <!-- Participants will be dynamically added here -->
                </div>
                <div class="flex">
                    <input id="participantInput" type="text" class="w-full p-2 border border-gray-300 rounded-l" placeholder="Input a participant">
                    <button id="addParticipantBtn" class="btn-text">--></button>
                </div>
                </div>
            </div>
            <%= button_to "Save", wheel_path(@wheel), method: :patch, class: "btn-secondary mt-4" %>
        </div>
    </div>
</div>

<!-- The winner modal -->
<div id="modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
    <h2 class="text-2xl font-bold mb-4">Winner</h2>
    <p id="winner" class="mb-4"></p>
    <div class="flex justify-end space-x-4">
      <button id="closeBtn" class="btn-secondary">Close</button>
      <button id="removeBtn" class="btn-primary">Remove</button>
    </div>
  </div>
</div>


<script src="https://code.jquery.com/jquery-1.6.2.min.js" integrity="sha256-0W0HoDU0BfzslffvxQomIbx0Jfml6IlQeDlvsNxGDE8=" crossorigin="anonymous"></script>

<!-- Participants edit + view functionality -->
<script>
    const viewTab = document.getElementById('viewTab');
    const editTab = document.getElementById('editTab');
    const viewMode = document.getElementById('viewMode');
    const editMode = document.getElementById('editMode');
    const participantInput = document.getElementById('participantInput');
    const addParticipantBtn = document.getElementById('addParticipantBtn');
    const editParticipantsDiv = document.getElementById('editParticipants');
    var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    let participants = <%= raw @temp_participants.to_json %>;

    function updateParticipantList() {
    let participants = <%= raw @temp_participants.to_json %>;
    refreshParticipantList(participants);
    }
    function refreshParticipantList(participants){
        editParticipantsDiv.innerHTML = '';

      participants.forEach(participant => {
        const participantElement = document.createElement('div');
        participantElement.className = 'rounded-full bg-gray-800 text-white p-2 px-4 flex flex-row gap-2';
        participantElement.innerHTML = `<p>${participant}</p><button onclick="removeParticipant('${participant}')">x</button>`;
        editParticipantsDiv.appendChild(participantElement);
      });
    }

    function addParticipant() {
      const participantName = participantInput.value.trim();
      if (participantName) {
        $.ajax({
            type: "POST",
            url: `/wheels/${wheel.id}/temp_create`,
            data: {id: wheel.id, name: String(participantName)},
            headers: {
                'X-CSRF-Token': csrfToken
            },
            success: function(response) {
                wheel.segments = response;
                wheel.update();
                
                refreshParticipantList(response);
                
            },
            error: function(error) {
                console.error("Error removing participant:", error);
            }
            });
      }
    }

    function removeParticipant(participant_name) {
      $.ajax({
            type: "POST",
            url: `/wheels/${wheel.id}/temp_delete`,
            data: { name: participant_name },
            headers: {
                'X-CSRF-Token': csrfToken
            },
            success: function(response) {
                // Hide modal after removing participant
                modal.classList.add("hidden");
                
                wheel.segments = response;
                wheel.update();
                refreshParticipantList(response);
                
            },
            error: function(error) {
                console.error("Error removing participant:", error);
            }
            });
      updateParticipantList();
    }

    addParticipantBtn.addEventListener('click', addParticipant);
    participantInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        addParticipant();
      }
    });

    viewTab.addEventListener('click', () => {
      viewTab.classList.add('active-tab');
      viewTab.classList.remove('inactive-tab');
      editTab.classList.add('inactive-tab');
      editTab.classList.remove('active-tab');
      viewMode.classList.remove('hidden');
      editMode.classList.add('hidden');
    });

    editTab.addEventListener('click', () => {
      editTab.classList.add('active-tab');
      editTab.classList.remove('inactive-tab');
      viewTab.classList.add('inactive-tab');
      viewTab.classList.remove('active-tab');
      viewMode.classList.add('hidden');
      editMode.classList.remove('hidden');
    });

    // Initial load
    updateParticipantList();
  </script>


<!-- Wheel spinning functionality -->
<script>
    // Helpers
    shuffle = function (o) {
    for (
        var j, x, i = o.length;
        i;
        j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x
    );
    return o;
    };

    String.prototype.hashCode = function () {
    var hash = 5381;
    for (i = 0; i < this.length; i++) {
        char = this.charCodeAt(i);
        hash = (hash << 5) + hash + char;
        hash = hash & hash;
    }
    return hash;
    };

    Number.prototype.mod = function (n) {
    return ((this % n) + n) % n;
    };

    // The Wheel
    var wheel = {
    timerHandle: 0,
    timerDelay: 33,
    angleCurrent: 0,
    angleDelta: 0,
    size: 290,
    canvasContext: null,
    colors: [
        "#4BB0E3",
        "#85A4CA",
        "#E66C15",
        "#EEB71E",
        "#A5D8F1",
        "#F3B68A",
        "#F6DB8F",
    ],
    segments: [],
    seg_colors: [],
    maxSpeed: Math.PI / 16,
    upTime: 500, // How long to spin up for
    downTime: 5500, // How long to slow down for
    spinStart: 0,
    frames: 0,
    centerX: 300,
    centerY: 300,

    spin: function () {
        // Start the wheel only if not already spinning
        if (wheel.timerHandle == 0) {
        wheel.spinStart = new Date().getTime();
        wheel.maxSpeed = Math.PI / (Math.random() * (6 - 16) + 16); // Randomly vary how hard the spin is
        wheel.frames = 0;
        //wheel.sound.play();
        wheel.timerHandle = setInterval(wheel.onTimerTick, wheel.timerDelay);
        }
    },

    onTimerTick: function () {
        wheel.frames++;
        wheel.draw();
        var duration = new Date().getTime() - wheel.spinStart;
        var progress = 0;
        var finished = false;
        if (duration < wheel.upTime) {
        progress = duration / wheel.upTime;
        wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2);
        } else {
        progress = duration / wheel.downTime;
        progress = 1 - Math.pow(1 - progress, 3); // Cubic easing out
        wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2);
        if (progress >= 1) finished = true;
        }
        wheel.angleCurrent += wheel.angleDelta;
        while (wheel.angleCurrent >= Math.PI * 2)
        wheel.angleCurrent -= Math.PI * 2;
        if (finished) {
        clearInterval(wheel.timerHandle);
        wheel.timerHandle = 0;
        wheel.angleDelta = 0;
        // Which segment is being pointed to?
        var i =
            wheel.segments.length -
            Math.floor(
            (wheel.angleCurrent / (Math.PI * 2)) * wheel.segments.length
            ) - 1;
        // Now draw the winning name
        var name = wheel.segments[i]
        wheel.createResult(name, wheel.id);
        wheel.showModal(name, wheel.id);
        }
    },


    createResult: function (name, wheel_id) {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    $.ajax({
        type: "POST",
        url: `/wheels/${wheel_id}/create_result`,
        data: { participant_name: name},
        headers: {
        'X-CSRF-Token': csrfToken
        },
        success: function(response) {
        console.log("Result created:", response);
        // Update the UI as needed
        },
        error: function(error) {
        console.error("Error creating result:", error);
        }
        });
        },


    showModal: function (name, wheel_id) {
        // Open modal and display winner's name
        var modal = document.getElementById("modal");
        var winner = document.getElementById("winner");
        winner.textContent = "Congratulations, " + name + "!";
        modal.classList.remove("hidden");

        // Event listeners for modal buttons
        document.getElementById("removeBtn").onclick = function() {
            var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            // AJAX request to call temp_delete
            $.ajax({
            type: "POST",
            url: `/wheels/${wheel_id}/temp_delete`,
            data: { name: name },
            headers: {
                'X-CSRF-Token': csrfToken
            },
            success: function(response) {
                // Hide modal after removing participant
                modal.classList.add("hidden");
                
                wheel.segments = response;
                wheel.update();
                updateParticipantList();
                refreshParticipantList(response);
                
            },
            error: function(error) {
                console.error("Error removing participant:", error);
            }
            });
        };
        document.getElementById("closeBtn").onclick = function() {
            modal.classList.add("hidden");
        };
    },
    init: function (optionList) {
        try {
        wheel.initWheel();
        wheel.initAudio();
        wheel.initCanvas();
        wheel.draw();
        $.extend(wheel, optionList);
        } catch (exceptionData) {
        alert("Wheel is not loaded " + exceptionData);
        }
    },

    // Not functional right now
    initAudio: function () {
        var sound = document.createElement("audio");
        sound.setAttribute("src", "http://bramp.net/javascript/wheel.mp3");
        wheel.sound = sound;
    },

    initCanvas: function () {
        var canvas = document.getElementById("canvas");
        canvas.addEventListener("click", wheel.spin, false);
        wheel.canvasContext = canvas.getContext("2d");
    },

    initWheel: function () {
        shuffle(wheel.colors);
    },

    // Called when segments have changed
    update: function () {
        // Ensure we start mid way on a item
        var r = 0;
        wheel.angleCurrent = ((r + 0.5) / wheel.segments.length) * Math.PI * 2;
        var segments = wheel.segments;
        var len = segments.length;
        var colors = wheel.colors;
        var colorLen = colors.length;
        // Generate a color cache (so we have consistant coloring)
        var seg_color = new Array();
        for (var i = 0; i < len; i++){
            seg_color.push(colors[segments[i].hashCode().mod(colorLen)]);
        }
        
        wheel.seg_color = seg_color;
        wheel.draw();
    },
    draw: function () {
        wheel.clear();
        wheel.drawWheel();
        wheel.drawNeedle();
    },
    clear: function () {
        var ctx = wheel.canvasContext;
        ctx.clearRect(0, 0, 1000, 800);
    },
    drawNeedle: function () {
        var ctx = wheel.canvasContext;
        var centerX = wheel.centerX;
        var centerY = wheel.centerY;
        var size = wheel.size;
        ctx.lineWidth = 1;
        ctx.strokeStyle = "#000000";
        ctx.fileStyle = "#ffffff";
        ctx.beginPath();
        ctx.moveTo(centerX + size - 20, centerY);
        ctx.lineTo(centerX + size + 15, centerY - 20);
        ctx.lineTo(centerX + size + 15, centerY + 20);
        ctx.closePath();
        ctx.stroke();
        ctx.fill();
    },
    drawSegment: function (key, lastAngle, angle) {
        var ctx = wheel.canvasContext;
        var centerX = wheel.centerX;
        var centerY = wheel.centerY;
        var size = wheel.size;
        var segments = wheel.segments;
        var len = wheel.segments.length;
        var colors = wheel.seg_color;
        var value = segments[key];
        ctx.save();
        ctx.beginPath();
        // Start in the centre
        ctx.moveTo(centerX, centerY);
        ctx.arc(centerX, centerY, size, lastAngle, angle, false); // Draw a arc around the edge
        ctx.lineTo(centerX, centerY); // Now draw a line back to the centre
        ctx.closePath();
        ctx.fillStyle = colors[key];
        ctx.fill();
        ctx.stroke();
        // Now draw the text
        ctx.save(); // The save ensures this works on Android devices
        ctx.translate(centerX, centerY);
        ctx.rotate((lastAngle + angle) / 2);
        ctx.fillStyle = "#000000";
        ctx.fillText(value.substr(0, 20), size / 2 + 20, 0);
        ctx.restore();
        ctx.restore();
    },
    drawWheel: function () {
        var ctx = wheel.canvasContext;
        var angleCurrent = wheel.angleCurrent;
        var lastAngle = angleCurrent;
        var segments = wheel.segments;
        var len = wheel.segments.length;
        var colors = wheel.colors;
        var colorsLen = wheel.colors.length;
        var centerX = wheel.centerX;
        var centerY = wheel.centerY;
        var size = wheel.size;
        var PI2 = Math.PI * 2;
        ctx.lineWidth = 1;
        ctx.strokeStyle = "#000000";
        ctx.textBaseline = "middle";
        ctx.textAlign = "center";
        ctx.font = "1.4em Arial";
        for (var i = 1; i <= len; i++) {
        var angle = PI2 * (i / len) + angleCurrent;
        wheel.drawSegment(i - 1, lastAngle, angle);
        lastAngle = angle;
        }
        // Draw a center circle
        ctx.beginPath();
        ctx.arc(centerX, centerY, 20, 0, PI2, false);
        ctx.closePath();
        ctx.fillStyle = "#ffffff";
        ctx.strokeStyle = "#000000";
        ctx.fill();
        ctx.stroke();
        // Draw outer circle
        ctx.beginPath();
        ctx.arc(centerX, centerY, size, 0, PI2, false);
        ctx.closePath();
        ctx.lineWidth = 10;
        ctx.strokeStyle = "#000000";
        ctx.stroke();
    }
    };

    window.onload = function () {
        wheel.init();

        wheel.segments = <%= raw @temp_participants.to_json %>;
        wheel.id = <%= @wheel.id %>;

        wheel.update();
        setTimeout(function () {
            window.scrollTo(0, 1);
        }, 0);
    };
</script>
