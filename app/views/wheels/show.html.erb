<!-- Title and present button -->
<div id="wheelHeading" class="flex justify-between px-4 md:px-12">
    <h1 class="pb-0"><%= @wheel.title %></h1>
    <button id="presentBtn" class="btn-primary">Present</button>
</div>

<div class="md:h-screen md:flex overflow-hidden">
    <div class="md:absolute left-20 top-8">
        <img id="spinet" src="/images/logo.png" class="hidden max-w-60" alt="The Spinet logo" >
    </div>
    <div id="wheelHalf" class="md:w-1/2 flex items-center justify-center">
        <div class="p-4 md:p-20">
            <!-- The wheel -->
            <div id="wheel">
                <canvas id="canvas" width="610" height="600"></canvas>
            </div>
            <div class="flex justify-center pt-4 md:justify-end">
                <button id="exitBtn" class="btn-secondary hidden mb-0">Exit</button>
            </div>
        </div>
    </div>
    <div id="editHalf" class="md:w-1/2 flex justify-center">
        <!-- Editing block -->
        <div class="md:pt-28 gap-8">
            <div class="relative w-72 md:w-96 pt-6">
                <div class="flex justify-between pb-4">
                    <!-- Tabs -->
                    <div>
                        <button id="editTab" class="active-tab">Names</button>
                        <button id="viewTab" class="inactive-tab">Results</button>
                    </div>
                    <!-- Sort buttons -->
                    <div id="sortButtons" class="flex gap-4 py-2">
                        <button id="shuffleBtn" class="btn-text" aria-label="Shuffle">
                            <svg class="w-6 fill-current" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true">
                                <path d="M23.3327 33.5309V30.1976H27.666L22.3743 24.9059L24.7493 22.5309L29.9993 27.7809V23.5309H33.3327V33.5309H23.3327ZM8.99935 33.5309L6.66602 31.1976L27.666 10.1976H23.3327V6.86426H33.3327V16.8643H29.9993V12.5309L8.99935 33.5309ZM15.291 17.8226L6.66602 9.19759L8.99935 6.86426L17.6243 15.4893L15.291 17.8226Z" fill="currentColor"/>
                            </svg>
                        </button>
                        <button id="alphBtn" class="btn-text" aria-label="Sort alphabetically">
                            <svg class="w-6 fill-current" alt="Sort" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true">
                                <path d="M3.33398 28.5312L9.58398 11.8646H13.1673L19.4173 28.5312H16.0007L14.584 24.5313H8.16732L6.83398 28.5312H3.33398ZM9.16732 21.6979H13.5007L11.5007 15.4479H11.2507L9.16732 21.6979ZM22.834 28.5312V25.3646L31.2507 14.8646H23.1673V11.8646H34.9173V15.0312L26.584 25.5312H35.0007V28.5312H22.834ZM15.0007 8.53125L20.0007 3.53125L25.0007 8.53125H15.0007ZM20.0007 36.8646L15.0007 31.8646H25.0007L20.0007 36.8646Z" fill="currentColor"/>
                            </svg>
                        </button>
                    </div>
                </div>
                <!-- View mode -->
                <div id="viewMode" class="hidden py-2">
                    <!-- Past winners -->
                    <div class="flex flex-wrap gap-2" id="past-results">
                        <% @results.each do |result| %>
                            <div class="rounded-full bg-gray-800 text-white p-2 px-4 flex flex-row gap-2">
                                <p><%= result.participant_name %></p>
                            </div>
                        <% end %>
                    </div>
                </div>
                <!-- Edit mode -->
                <div id="editMode" class="py-2">
                    <div id="editParticipants" class="flex flex-wrap gap-2 pb-4">
                        <!-- Participants will be dynamically added here -->
                    </div>
                    <!-- Participants input -->
                    <div class="flex items-center pt-4">
                        <input id="participantInput" type="text" placeholder="Input a participant">
                        <button id="addParticipantBtn" class="btn-text pl-2" aria-label="Add participant">
                            <svg class="w-8 fill-current" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true">
                                <path d="M23.3334 30L21.0001 27.5833L26.9167 21.6667H6.66675V18.3333H26.9167L21.0001 12.4167L23.3334 10L33.3334 20L23.3334 30Z" fill="currentColor"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            <%= button_to "Save", wheel_path(@wheel), method: :patch, class: "btn-secondary mt-8" %>
        </div>
    </div>
</div>

<!-- The winner modal -->
<div id="modal" class="modal-bg hidden">
  <div class="modal">
    <h2>We have a winner!</h2>
    <p id="winner" class="mb-4"></p>
    <div class="flex justify-end space-x-4">
        <button id="closeBtn" class="btn-secondary mb-0">Close</button>
        <button id="removeBtn" class="btn-primary mb-0">Remove</button>
    </div>
  </div>
</div>
<audio id="winAudio" src="/audios/game-win.wav"></audio>


<!-- Javascript -->
<script src="https://code.jquery.com/jquery-1.6.2.min.js" integrity="sha256-0W0HoDU0BfzslffvxQomIbx0Jfml6IlQeDlvsNxGDE8=" crossorigin="anonymous"></script>

<!-- Modals and tabs -->
<script>
    // Present mode functionality
    const navbar = document.getElementById('navbar');
    const wheelHeading = document.getElementById('wheelHeading');
    const wheelHalf = document.getElementById('wheelHalf');
    const editHalf = document.getElementById('editHalf');
    const exitBtn = document.getElementById('exitBtn');
    const spinet = document.getElementById('spinet');
    function presentMode() {
        navbar.classList.add('hidden');
        wheelHeading.classList.add('hidden');
        editHalf.classList.add('hidden');
        exitBtn.classList.remove('hidden');
        spinet.classList.remove('hidden');
        wheelHalf.classList.remove('w-1/2');
        wheelHalf.classList.add('w-full');
    }
    function exitPresentMode() {
        navbar.classList.remove('hidden');
        wheelHeading.classList.remove('hidden');
        editHalf.classList.remove('hidden');
        exitBtn.classList.add('hidden');
        spinet.classList.add('hidden');
        wheelHalf.classList.remove('w-full');
        wheelHalf.classList.add('w-1/2');
    }
    presentBtn.addEventListener('click', presentMode);
    exitBtn.addEventListener('click', exitPresentMode);

    // Participants edit + view functionality
    const viewTab = document.getElementById('viewTab');
    const editTab = document.getElementById('editTab');
    const viewMode = document.getElementById('viewMode');
    const editMode = document.getElementById('editMode');
    const participantInput = document.getElementById('participantInput');
    const addParticipantBtn = document.getElementById('addParticipantBtn');
    const shuffleBtn = document.getElementById('shuffleBtn');
    const alphBtn = document.getElementById('alphBtn');
    var participantName = participantInput.value.trim();
    const editParticipantsDiv = document.getElementById('editParticipants');
    const sortButtons = document.getElementById('sortButtons');
    var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    var participantName = participantInput.value.trim();

    let participants = <%= raw @temp_participants.to_json %>;
    function updateParticipantList() {
        let participants = <%= raw @temp_participants.to_json %>;
        refreshParticipantList(participants);
    }
    function refreshParticipantList(participants){
        editParticipantsDiv.innerHTML = '';
        participants.forEach(participant => {
            const participantElement = document.createElement('div');
            participantElement.className = 'rounded-full bg-gray-800 text-white p-2 px-4 flex flex-row gap-2';
            participantElement.innerHTML = `<p>${participant}</p><button onclick="removeParticipant('${participant}')" aria-label="Remove participant">
            <svg class="w-4 fill-white" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true">
                <path d="M10.6666 31.6667L8.33325 29.3333L17.6666 20L8.33325 10.6667L10.6666 8.33333L19.9999 17.6667L29.3333 8.33333L31.6666 10.6667L22.3333 20L31.6666 29.3333L29.3333 31.6667L19.9999 22.3333L10.6666 31.6667Z" fill="currentColor"/>
            </svg>
            </button>`;
            editParticipantsDiv.appendChild(participantElement);
        });
    }

    function addParticipant() {
      const participantName = participantInput.value.trim();
      if (participantName) {
        $.ajax({
            type: "POST",
            url: `/wheels/${wheel.id}/temp_create`,
            data: {
                id: wheel.id, 
                name: String(participantName)
            },
            headers: {
                'X-CSRF-Token': csrfToken
            },
            success: function(response) {
                wheel.segments = response;
                wheel.update();
                refreshParticipantList(response);
            },
            error: function(error) {
                console.error("Error removing participant:", error);
            }
        });
        participantInput.value = '';
      }
    }
    function removeParticipant(participant_name) {
        $.ajax({
            type: "POST",
            url: `/wheels/${wheel.id}/temp_delete`,
            data: { name: participant_name },
            headers: {
                'X-CSRF-Token': csrfToken
            },
            success: function(response) {
                // Hide modal after removing participant
                modal.classList.add("hidden");
                
                wheel.segments = response;
                wheel.update();
                refreshParticipantList(response);
            },
            error: function(error) {
                console.error("Error sorting participants:", error);
            }
        });
        updateParticipantList();
    }

    function shuffleParticipants() {
        $.ajax({
                type: "POST",
                url: `/wheels/${wheel.id}/shuffle`,
                headers: {
                    'X-CSRF-Token': csrfToken
                },
                success: function(response) {
                    wheel.segments = response;
                    wheel.update();
                    refreshParticipantList(response);
                    
                },
                error: function(error) {
                    console.error("Error shuffling participants:", error);
                }
            });
        updateParticipantList();
    }
    function sortParticipantsAlphabetically() {
        $.ajax({
                type: "POST",
                url: `/wheels/${wheel.id}/sort_alphabetically`,
                headers: {
                    'X-CSRF-Token': csrfToken
                },
                success: function(response) {        
                    wheel.segments = response;
                    wheel.update();
                    refreshParticipantList(response);
                    
                },
                error: function(error) {
                    console.error("Error sorting participants:", error);
                }
            });
        updateParticipantList();
    }

    shuffleBtn.addEventListener('click', shuffleParticipants);
    alphBtn.addEventListener('click', sortParticipantsAlphabetically);
    addParticipantBtn.addEventListener('click', addParticipant);
    participantInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            addParticipant();
        }
    });

    viewTab.addEventListener('click', () => {
        viewTab.classList.add('active-tab');
        viewTab.classList.remove('inactive-tab');
        editTab.classList.add('inactive-tab');
        editTab.classList.remove('active-tab');
        viewMode.classList.remove('hidden');
        editMode.classList.add('hidden');
        sortButtons.classList.add('hidden');
    });
    editTab.addEventListener('click', () => {
        editTab.classList.add('active-tab');
        editTab.classList.remove('inactive-tab');
        viewTab.classList.add('inactive-tab');
        viewTab.classList.remove('active-tab');
        viewMode.classList.add('hidden');
        editMode.classList.remove('hidden');
        sortButtons.classList.remove('hidden');
    });

    // Initial load
    updateParticipantList();
</script>

<!-- Confetti library -->
<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.3/dist/confetti.browser.min.js"></script>

<!-- Wheel functionality -->
<script>
    // Helpers
    shuffle = function (o) {
        for (
            var j, x, i = o.length;
            i;
            j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x
        );
        return o;
    };

    String.prototype.hashCode = function () {
        var hash = 5381;
        for (i = 0; i < this.length; i++) {
            char = this.charCodeAt(i);
            hash = (hash << 5) + hash + char;
            hash = hash & hash;
        }
        return hash;
    };

    Number.prototype.mod = function (n) {
        return ((this % n) + n) % n;
    };

    // The Wheel
    var wheel = {
        timerHandle: 0,
        timerDelay: 33,
        angleCurrent: 0,
        angleDelta: 0,
        size: 290,
        canvasContext: null,
        colors: [
            "#4BB0E3",
            "#85A4CA",
            "#E66C15",
            "#EEB71E",
            "#A5D8F1",
            "#F3B68A",
            "#F6DB8F",
        ],
        segments: [],
        seg_colors: [],
        maxSpeed: Math.PI / 16,
        upTime: 500, // How long to spin up for
        downTime: 5500, // How long to slow down for
        spinStart: 0,
        frames: 0,
        centerX: 300,
        centerY: 300,

        spin: function () {
            // Check if there are participants
            if (wheel.segments.length === 0) {
                document.getElementById("wheelHeading").insertAdjacentHTML("beforebegin",
                    `<p id="alert-banner" class="alert alert-danger fixed top-0 left-0 w-full z-50 p-4">Add some participants before spinning the wheel</p>`
                );
                const alertBanner = document.getElementById('alert-banner');
                if (alertBanner) {
                    setTimeout(function() {
                        alertBanner.style.transition = "opacity 1s ease";
                        alertBanner.style.opacity = 0;
                        setTimeout(() => alertBanner.remove(), 1000);
                    }, 2000);
                }
                return;
            }
            // Start the wheel only if not already spinning
            if (wheel.timerHandle == 0) {
                wheel.spinStart = new Date().getTime();
                wheel.maxSpeed = Math.PI / (Math.random() * (6 - 16) + 16); // Randomly vary how hard the spin is
                wheel.frames = 0;
                wheel.spinSound.play();
                wheel.timerHandle = setInterval(wheel.onTimerTick, wheel.timerDelay);
            }
        },

        onTimerTick: function () {
            wheel.frames++;
            wheel.draw();
            var duration = new Date().getTime() - wheel.spinStart;
            var progress = 0;
            var finished = false;
            if (duration < wheel.upTime) {
                progress = duration / wheel.upTime;
                wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2);
            } 
            else {
                progress = duration / wheel.downTime;
                progress = 1 - Math.pow(1 - progress, 3); // Cubic easing out
                wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2);
                if (progress >= 1) {
                    wheel.spinSound.pause();
                    wheel.spinSound.currentTime = 0;
                    finished = true;
                }
            }
            wheel.angleCurrent += wheel.angleDelta;
            while (wheel.angleCurrent >= Math.PI * 2)
            wheel.angleCurrent -= Math.PI * 2;
            if (finished) {
                clearInterval(wheel.timerHandle);
                wheel.timerHandle = 0;
                wheel.angleDelta = 0;
                // Which segment is being pointed to?
                var i = wheel.segments.length - Math.floor((wheel.angleCurrent / (Math.PI * 2)) * wheel.segments.length) - 1;
                // Now draw the winning name
                var name = wheel.segments[i]
                wheel.createResult(name, wheel.id);
                wheel.showModal(name, wheel.id);
            }
        },

        createResult: function (name, wheel_id) {
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            $.ajax({
                type: "POST",
                url: `/results`,
                data: { participant_name: name, wheel_id: wheel_id},
                headers: {
                    'X-CSRF-Token': csrfToken
                },
                success: function(response) {
                    // Update the UI as needed
                    document.getElementById("past-results").insertAdjacentHTML("afterbegin",`
                        <div class="rounded-full bg-gray-800 text-white p-2 px-4 flex flex-row gap-2">
                            <p>${name}</p>
                        </div>`
                    );
                },
                error: function(error) {
                    console.error("Error creating result:", error);
                }
            });
        },

        showModal: function (name, wheel_id) {
            // Play winning audio
            var winSound = document.getElementById("winAudio");
            winSound.play();

            // Open modal and display winner's name
            var modal = document.getElementById("modal");
            var winner = document.getElementById("winner");
            winner.textContent = "Congratulations, " + name + "!";
            modal.classList.remove("hidden");

            // Event listeners for modal buttons
            document.getElementById("removeBtn").onclick = function() {
                var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                // AJAX request to call temp_delete
                $.ajax({
                    type: "POST",
                    url: `/wheels/${wheel_id}/temp_delete`,
                    data: { name: name },
                    headers: { 'X-CSRF-Token': csrfToken },
                    success: function(response) {
                        // Hide modal after removing participant
                        modal.classList.add("hidden");
                        wheel.segments = response;
                        wheel.update();
                        updateParticipantList();
                        refreshParticipantList(response);
                    },
                    error: function(error) {
                        console.error("Error removing participant:", error);
                    }
                });
            };
            document.getElementById("closeBtn").onclick = function() {
                modal.classList.add("hidden");
            };

            // Confetti!
            let duration = 4000;
            let animationEnd = Date.now() + duration;
            let defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

            function randomInRange(min, max) {
                return Math.random() * (max - min) + min;
            }

            let interval = setInterval(function() {
                let timeLeft = animationEnd - Date.now();

                if (timeLeft <= 0) {
                    return clearInterval(interval);
                }

                let particleCount = 50 * (timeLeft / duration);
                confetti(Object.assign(
                    {}, 
                    defaults, { 
                        particleCount, origin: { 
                            x: randomInRange(0.1, 0.3), 
                            y: Math.random() - 0.2 
                        } 
                    }
                ));
                confetti(Object.assign(
                    {}, 
                    defaults, { 
                        particleCount, origin: { 
                            x: randomInRange(0.7, 0.9), 
                            y: Math.random() - 0.2 
                        } 
                    }
                ));
            }, 250);
        },

        init: function (optionList) {
            try {
                wheel.initWheel();
                wheel.initAudio();
                wheel.initCanvas();
                wheel.draw();
                $.extend(wheel, optionList);
            } 
            catch (exceptionData) {
                alert("Wheel is not loaded " + exceptionData);
            }
        },
        initAudio: function () {
            var spinSound = document.createElement("audio");
            spinSound.setAttribute("src", "/audios/spinning.mp3");
            wheel.spinSound = spinSound;
        },
        initCanvas: function () {
            var canvas = document.getElementById("canvas");
            canvas.addEventListener("click", wheel.spin, false);
            wheel.canvasContext = canvas.getContext("2d");
        },
        initWheel: function () {
            shuffle(wheel.colors);
        },

        // Called when segments have changed
        update: function () {
            // Ensure we start mid way on a item
            var r = 0;
            wheel.angleCurrent = ((r + 0.5) / wheel.segments.length) * Math.PI * 2;
            var segments = wheel.segments;
            var len = segments.length;
            var colors = wheel.colors;
            var colorLen = colors.length;
            // Generate a color cache (so we have consistant coloring)
            var seg_color = new Array();
            for (var i = 0; i < len; i++){
                seg_color.push(colors[segments[i].hashCode().mod(colorLen)]);
            }
            wheel.seg_color = seg_color;
            wheel.draw();
        },
        
        draw: function () {
            wheel.clear();
            wheel.drawWheel();
            wheel.drawNeedle();
        },
        clear: function () {
            var ctx = wheel.canvasContext;
            ctx.clearRect(0, 0, 1000, 800);
        },
        drawNeedle: function () {
            var ctx = wheel.canvasContext;
            var centerX = wheel.centerX;
            var centerY = wheel.centerY;
            var size = wheel.size;
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#000000";
            ctx.fileStyle = "#ffffff";
            ctx.beginPath();
            ctx.moveTo(centerX + size - 20, centerY);
            ctx.lineTo(centerX + size + 15, centerY - 20);
            ctx.lineTo(centerX + size + 15, centerY + 20);
            ctx.closePath();
            ctx.stroke();
            ctx.fill();
        },
        drawSegment: function (key, lastAngle, angle) {
            var ctx = wheel.canvasContext;
            var centerX = wheel.centerX;
            var centerY = wheel.centerY;
            var size = wheel.size;
            var segments = wheel.segments;
            var len = wheel.segments.length;
            var colors = wheel.seg_color;
            var value = segments[key];
            ctx.save();
            ctx.beginPath();
            // Start in the center
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, size, lastAngle, angle, false); // Draw an arc around the edge
            ctx.lineTo(centerX, centerY); // Now draw a line back to the center
            ctx.closePath();
            ctx.fillStyle = colors[key];
            ctx.fill();
            ctx.stroke();
            // Now draw the text
            ctx.save(); // The save ensures this works on Android devices
            ctx.translate(centerX, centerY);
            ctx.rotate((lastAngle + angle) / 2);
            ctx.fillStyle = "#000000";
            ctx.fillText(value.substr(0, 20), size / 2 + 20, 0);
            ctx.restore();
            ctx.restore();
        },
        drawWheel: function () {
            var ctx = wheel.canvasContext;
            var angleCurrent = wheel.angleCurrent;
            var lastAngle = angleCurrent;
            var segments = wheel.segments;
            var len = wheel.segments.length;
            var colors = wheel.colors;
            var colorsLen = wheel.colors.length;
            var centerX = wheel.centerX;
            var centerY = wheel.centerY;
            var size = wheel.size;
            var PI2 = Math.PI * 2;
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#000000";
            ctx.textBaseline = "middle";
            ctx.textAlign = "center";
            ctx.font = "1.4em Arial";
            for (var i = 1; i <= len; i++) {
                var angle = PI2 * (i / len) + angleCurrent;
                wheel.drawSegment(i - 1, lastAngle, angle);
                lastAngle = angle;
            }
            // Draw a center circle
            ctx.beginPath();
            ctx.arc(centerX, centerY, 20, 0, PI2, false);
            ctx.closePath();
            ctx.fillStyle = "#ffffff";
            ctx.strokeStyle = "#000000";
            ctx.fill();
            ctx.stroke();
            // Draw outer circle
            ctx.beginPath();
            ctx.arc(centerX, centerY, size, 0, PI2, false);
            ctx.closePath();
            ctx.lineWidth = 10;
            ctx.strokeStyle = "#000000";
            ctx.stroke();
        }
    };

    // Initialize on load
    window.onload = function () {
        wheel.init();
        wheel.segments = <%= raw @temp_participants.to_json %>;
        wheel.id = <%= @wheel.id %>;
        wheel.update();
        setTimeout(function () {
            window.scrollTo(0, 1);
        }, 0);
    };
</script>
