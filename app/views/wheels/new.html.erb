<h1>New Wheel</h1>

<!-- The wheel -->
<div id="wheel">
  <canvas id="canvas" width="610" height="600"></canvas>
</div>
<div id="stats">
</div>

<!-- The winner modal -->
<div id="modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
    <h2 class="text-2xl font-bold mb-4">Winner</h2>
    <p id="winner" class="mb-4"></p>
    <div class="flex justify-end space-x-4">
      <button id="closeBtn" class="btn-secondary">Close</button>
      <button id="removeBtn" class="btn-primary">Remove</button>
    </div>
  </div>
</div>


<script src="https://code.jquery.com/jquery-1.6.2.min.js" integrity="sha256-0W0HoDU0BfzslffvxQomIbx0Jfml6IlQeDlvsNxGDE8=" crossorigin="anonymous"></script>
<script>
// Helpers
shuffle = function (o) {
  for (
    var j, x, i = o.length;
    i;
    j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x
  );
  return o;
};

String.prototype.hashCode = function () {
  // See http://www.cse.yorku.ca/~oz/hash.html
  var hash = 5381;
  for (i = 0; i < this.length; i++) {
    char = this.charCodeAt(i);
    hash = (hash << 5) + hash + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return hash;
};

Number.prototype.mod = function (n) {
  return ((this % n) + n) % n;
};

// The Wheel
var wheel = {
  timerHandle: 0,
  timerDelay: 33,
  angleCurrent: 0,
  angleDelta: 0,
  size: 290,
  canvasContext: null,
  colors: [
    "#4BB0E3",
    "#1F559E",
    "#E66C15",
    "#EEB71E",
    "#ff0000",
    "#c6037e",
    "#713697",
    "#444ea1",
    "#2772b2",
    "#0297ba",
    "#008e5b",
    "#8ac819"
  ],
  segments: [],
  seg_colors: [],
  
  // Cache of segments to colors
  maxSpeed: Math.PI / 16,
  upTime: 500, // How long to spin up for (in ms)
  downTime: 5500, // How long to slow down for (in ms)
  spinStart: 0,
  frames: 0,
  centerX: 300,
  centerY: 300,

  spin: function () {
    // Start the wheel only if it's not already spinning
    if (wheel.timerHandle == 0) {
      wheel.spinStart = new Date().getTime();
      wheel.maxSpeed = Math.PI / (Math.random() * (6 - 16) + 16); // Randomly vary how hard the spin is
      wheel.frames = 0;
      //wheel.sound.play();
      wheel.timerHandle = setInterval(wheel.onTimerTick, wheel.timerDelay);
    }
  },

  onTimerTick: function () {
    wheel.frames++;
    wheel.draw();
    var duration = new Date().getTime() - wheel.spinStart;
    var progress = 0;
    var finished = false;
    if (duration < wheel.upTime) {
      progress = duration / wheel.upTime;
      wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2);
    } else {
      progress = duration / wheel.downTime;
      // Cubic easing out
      progress = 1 - Math.pow(1 - progress, 3);
      wheel.angleDelta = wheel.maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2);
      if (progress >= 1) finished = true;
    }
    wheel.angleCurrent += wheel.angleDelta;
    while (wheel.angleCurrent >= Math.PI * 2)
      // Keep the angle in a reasonable range
      wheel.angleCurrent -= Math.PI * 2;
    if (finished) {
      clearInterval(wheel.timerHandle);
      wheel.timerHandle = 0;
      wheel.angleDelta = 0;
      // Which segment is being pointed to?
      var i =
        wheel.segments.length -
        Math.floor(
          (wheel.angleCurrent / (Math.PI * 2)) * wheel.segments.length
        ) - 1;
      // Now draw the winning name
      var name = wheel.segments[i];
      // resultPicked() function here
          // open modal, display the name of the winner, option to remove or just close
          // send it to the db as 
      wheel.showModal(name);

      // removeParticipant() function here
          // remove participant from wheel in db

    }
  },

  showModal: function (name) {
    // Open modal and display winner's name
      var modal = document.getElementById("modal");
      var winner = document.getElementById("winner");
      winner.textContent = "Congratulations, " + name + "!";
      modal.classList.remove("hidden");

      // Event listeners for modal buttons
      document.getElementById("removeBtn").onclick = function() {
        // removeParticipant() function here
        // remove participant from wheel in db

        // Hide modal after removing participant
        modal.classList.add("hidden");
      };

      document.getElementById("closeBtn").onclick = function() {
        // Hide modal without removing participant
        modal.classList.add("hidden");
      };
  },

  init: function (optionList) {
    try {
      wheel.initWheel();
      wheel.initAudio();
      wheel.initCanvas();
      wheel.draw();
      $.extend(wheel, optionList);
    } catch (exceptionData) {
      alert("Wheel is not loaded " + exceptionData);
    }
  },

  //Need to update to put to a new audio file
  initAudio: function () {
    var sound = document.createElement("audio");
    sound.setAttribute("src", "http://bramp.net/javascript/wheel.mp3");
    wheel.sound = sound;
  },

  initCanvas: function () {
    var canvas = document.getElementById("canvas");

    canvas.addEventListener("click", wheel.spin, false);
    wheel.canvasContext = canvas.getContext("2d");
  },

  initWheel: function () {
    shuffle(wheel.colors);
  },

  // Called when segments have changed
  update: function () {
    // Ensure we start mid way on a item
    var r = 0;
    wheel.angleCurrent = ((r + 0.5) / wheel.segments.length) * Math.PI * 2;
    var segments = wheel.segments;
    var len = segments.length;
    var colors = wheel.colors;
    var colorLen = colors.length;
    // Generate a color cache (so we have consistant coloring)
    var seg_color = new Array();
    for (var i = 0; i < len; i++)
      seg_color.push(colors[segments[i].hashCode().mod(colorLen)]);
    wheel.seg_color = seg_color;
    wheel.draw();
  },
  draw: function () {
    wheel.clear();
    wheel.drawWheel();
    wheel.drawNeedle();
  },
  clear: function () {
    var ctx = wheel.canvasContext;
    ctx.clearRect(0, 0, 1000, 800);
  },
  drawNeedle: function () {
    var ctx = wheel.canvasContext;
    var centerX = wheel.centerX;
    var centerY = wheel.centerY;
    var size = wheel.size;
    ctx.lineWidth = 1;
    ctx.strokeStyle = "#000000";
    ctx.fileStyle = "#ffffff";
    ctx.beginPath();
    ctx.moveTo(centerX + size - 20, centerY);
    ctx.lineTo(centerX + size + 15, centerY - 20);
    ctx.lineTo(centerX + size + 15, centerY + 20);
    ctx.closePath();
    ctx.stroke();
    ctx.fill();
  },
  drawSegment: function (key, lastAngle, angle) {
    var ctx = wheel.canvasContext;
    var centerX = wheel.centerX;
    var centerY = wheel.centerY;
    var size = wheel.size;
    var segments = wheel.segments;
    var len = wheel.segments.length;
    var colors = wheel.seg_color;
    var value = segments[key];
    ctx.save();
    ctx.beginPath();
    // Start in the centre
    ctx.moveTo(centerX, centerY);
    ctx.arc(centerX, centerY, size, lastAngle, angle, false); // Draw a arc around the edge
    ctx.lineTo(centerX, centerY); // Now draw a line back to the centre
    // Clip anything that follows to this area
    //ctx.clip(); // It would be best to clip, but we can double performance without it
    ctx.closePath();
    ctx.fillStyle = colors[key];
    ctx.fill();
    ctx.stroke();
    // Now draw the text
    ctx.save(); // The save ensures this works on Android devices
    ctx.translate(centerX, centerY);
    ctx.rotate((lastAngle + angle) / 2);
    ctx.fillStyle = "#000000";
    ctx.fillText(value.substr(0, 20), size / 2 + 20, 0);
    ctx.restore();
    ctx.restore();
  },
  drawWheel: function () {
    var ctx = wheel.canvasContext;
    var angleCurrent = wheel.angleCurrent;
    var lastAngle = angleCurrent;
    var segments = wheel.segments;
    var len = wheel.segments.length;
    var colors = wheel.colors;
    var colorsLen = wheel.colors.length;
    var centerX = wheel.centerX;
    var centerY = wheel.centerY;
    var size = wheel.size;
    var PI2 = Math.PI * 2;
    ctx.lineWidth = 1;
    ctx.strokeStyle = "#000000";
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    ctx.font = "1.4em Arial";
    for (var i = 1; i <= len; i++) {
      var angle = PI2 * (i / len) + angleCurrent;
      wheel.drawSegment(i - 1, lastAngle, angle);
      lastAngle = angle;
    }
    // Draw a center circle
    ctx.beginPath();
    ctx.arc(centerX, centerY, 20, 0, PI2, false);
    ctx.closePath();
    ctx.fillStyle = "#ffffff";
    ctx.strokeStyle = "#000000";
    ctx.fill();
    ctx.stroke();
    // Draw outer circle
    ctx.beginPath();
    ctx.arc(centerX, centerY, size, 0, PI2, false);
    ctx.closePath();
    ctx.lineWidth = 10;
    ctx.strokeStyle = "#000000";
    ctx.stroke();
  }
};

window.onload = function () {
  wheel.init();

  wheel.segments = [
    "Name One",
    "Name Two",
    "Name Three",
    "Name Four",
    "Name Five",
    "Name Six"
  ];

  wheel.update();
  // Hide the address bar (for mobile devices)!
  setTimeout(function () {
    window.scrollTo(0, 1);
  }, 0);
};
</script>